//This file is automatically generated by generator.lua from https://github.com/anthonyhan/ImGuiNodes
//based on nodes.h file version XXX from https://gist.github.com/ChemistAion/0cd64b71711d81661344af040c142c1c
//with internal.h api
#ifndef CIMGUINODES_INCLUDED
#define CIMGUINODES_INCLUDED

#include "cimgui.h"

#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS

typedef struct ImGuiNodesNode ImGuiNodesNode;
typedef struct ImGuiNodesInput ImGuiNodesInput;
typedef struct ImGuiNodesOutput ImGuiNodesOutput;
	typedef unsigned int ImGuiNodesConnectorType;
	typedef unsigned int ImGuiNodesNodeType;
	typedef unsigned int ImGuiNodesConnectorState;
	typedef unsigned int ImGuiNodesNodeState;
	typedef unsigned int ImGuiNodesState;
typedef enum {
		ImGuiNodesConnectorType_None = 0,
		ImGuiNodesConnectorType_Generic,
		ImGuiNodesConnectorType_Int,
		ImGuiNodesConnectorType_Float,
		ImGuiNodesConnectorType_Vector,
		ImGuiNodesConnectorType_Image,
		ImGuiNodesConnectorType_Text
	}ImGuiNodesConnectorType_;
typedef enum {
		ImGuiNodesNodeType_None = 0,
		ImGuiNodesNodeType_Generic,
		ImGuiNodesNodeType_Generator,
		ImGuiNodesNodeType_Test
	}ImGuiNodesNodeType_;
typedef enum {
		ImGuiNodesConnectorStateFlag_Default	= 0,
		ImGuiNodesConnectorStateFlag_Visible	= 1 << 0,
		ImGuiNodesConnectorStateFlag_Hovered	= 1 << 1,
		ImGuiNodesConnectorStateFlag_Consider	= 1 << 2,
		ImGuiNodesConnectorStateFlag_Draging	= 1 << 3
	}ImGuiNodesConnectorStateFlag_;
typedef enum {
		ImGuiNodesNodeStateFlag_Default			= 0,
		ImGuiNodesNodeStateFlag_Visible			= 1 << 0,
		ImGuiNodesNodeStateFlag_Hovered			= 1 << 1,
		ImGuiNodesNodeStateFlag_Marked			= 1 << 2,
		ImGuiNodesNodeStateFlag_Selected		= 1 << 3,
		ImGuiNodesNodeStateFlag_Collapsed		= 1 << 4,
		ImGuiNodesNodeStateFlag_Disabled		= 1 << 5,
		ImGuiNodesNodeStateFlag_Processing		= 1 << 6
	}ImGuiNodesNodeStateFlag_;
typedef enum {
		ImGuiNodesState_Default	= 0,
		ImGuiNodesState_HoveringNode,
		ImGuiNodesState_HoveringInput,
		ImGuiNodesState_HoveringOutput,
		ImGuiNodesState_Draging,
		ImGuiNodesState_DragingInput,
		ImGuiNodesState_DragingOutput,
		ImGuiNodesState_Selecting
	}ImGuiNodesState_;
	const float ImGuiNodesConnectorDotDiameter = 0.7f;
	const float ImGuiNodesConnectorDotPadding = 0.35f;
	const float ImGuiNodesConnectorDistance = 1.5f;
	const float ImGuiNodesHSeparation = 1.7f;
	const float ImGuiNodesVSeparation = 1.5f;
	const float ImGuiNodesTitleHight = 2.0f;
	struct ImGuiNodesNode;
	struct ImGuiNodesInput;
	struct ImGuiNodesOutput;
struct ImGuiNodesInput
{
		ImVec2 pos_;
		ImRect area_input_;
		ImRect area_name_;
		ImGuiNodesConnectorType type_;
		ImGuiNodesConnectorState state_;
		const char* name_;
		ImGuiNodesNode* target_;
		ImGuiNodesOutput* output_;
};
struct ImGuiNodesOutput
{
		ImVec2 pos_;
		ImRect area_output_;
		ImRect area_name_;
		ImGuiNodesConnectorType type_;
		ImGuiNodesConnectorState state_;
		const char* name_;
		unsigned int connections_;
};
typedef struct ImVector_ImGuiNodesInput {int Size;int Capacity;ImGuiNodesInput* Data;} ImVector_ImGuiNodesInput;

typedef struct ImVector_ImGuiNodesOutput {int Size;int Capacity;ImGuiNodesOutput* Data;} ImVector_ImGuiNodesOutput;

struct ImGuiNodesNode
{
		ImRect area_node_;
		ImRect area_name_;
		float title_height_;
		float body_height_;
		ImGuiNodesNodeState state_;
		ImGuiNodesNodeType type_;
		const char* name_;
		ImColor color_;
		ImVector_ImGuiNodesInput inputs_;
		ImVector_ImGuiNodesOutput outputs_;
};
typedef struct ImGuiNodesConnectionDesc ImGuiNodesConnectionDesc;
struct ImGuiNodesConnectionDesc
{
		char name_[(32 - sizeof(ImGuiNodesConnectorType))];
		ImGuiNodesConnectorType type_;
};
typedef struct ImGuiNodesNodeDesc ImGuiNodesNodeDesc;
typedef struct ImVector_ImGuiNodesConnectionDesc {int Size;int Capacity;ImGuiNodesConnectionDesc* Data;} ImVector_ImGuiNodesConnectionDesc;

struct ImGuiNodesNodeDesc
{
		char name_[(32 - sizeof(ImGuiNodesConnectorType))];
		ImGuiNodesNodeType type_;
		ImColor color_;
		ImVector_ImGuiNodesConnectionDesc inputs_;
		ImVector_ImGuiNodesConnectionDesc outputs_;
};
typedef struct ImGuiNodes ImGuiNodes;
typedef struct ImVector_ImGuiNodesNodePtr {int Size;int Capacity;ImGuiNodesNode** Data;} ImVector_ImGuiNodesNodePtr;

typedef struct ImVector_ImGuiNodesNodeDesc {int Size;int Capacity;ImGuiNodesNodeDesc* Data;} ImVector_ImGuiNodesNodeDesc;

struct ImGuiNodes
{
		ImVec2 mouse_;
		ImVec2 pos_;
		ImVec2 size_;
		ImVec2 scroll_;
		ImVec4 connection_;
		float scale_;
		ImGuiNodesState state_;
		ImRect area_;
		ImGuiNodesNode* element_node_;
		ImGuiNodesInput* element_input_;
		ImGuiNodesOutput* element_output_;
		ImGuiNodesNode* processing_node_;
		ImVector_ImGuiNodesNodePtr nodes_;
		ImVector_ImGuiNodesNodeDesc nodes_desc_;
};
#else
#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef imguinodes::ImGuiNodes ImGuiNodes;
typedef imguinodes::ImGuiNodesConnectionDesc ImGuiNodesConnectionDesc;
typedef imguinodes::ImGuiNodesInput ImGuiNodesInput;
typedef imguinodes::ImGuiNodesNode ImGuiNodesNode;
typedef imguinodes::ImGuiNodesNodeDesc ImGuiNodesNodeDesc;
typedef imguinodes::ImGuiNodesOutput ImGuiNodesOutput;
typedef imguinodes::ImGuiNodesConnectorStateFlag_ ImGuiNodesConnectorStateFlag_;
typedef imguinodes::ImGuiNodesConnectorType_ ImGuiNodesConnectorType_;
typedef imguinodes::ImGuiNodesNodeStateFlag_ ImGuiNodesNodeStateFlag_;
typedef imguinodes::ImGuiNodesNodeType_ ImGuiNodesNodeType_;
typedef imguinodes::ImGuiNodesState_ ImGuiNodesState_;
typedef ImVector<ImGuiNodesConnectionDesc> ImVector_ImGuiNodesConnectionDesc;
typedef ImVector<ImGuiNodesInput> ImVector_ImGuiNodesInput;
typedef ImVector<ImGuiNodesNode*> ImVector_ImGuiNodesNodePtr;
typedef ImVector<ImGuiNodesNodeDesc> ImVector_ImGuiNodesNodeDesc;
typedef ImVector<ImGuiNodesOutput> ImVector_ImGuiNodesOutput;
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API void ImGuiNodesInput_TranslateInput(ImGuiNodesInput* self,ImVec2 delta);
CIMGUI_API void ImGuiNodesInput_DrawInput(ImGuiNodesInput* self,ImDrawList* draw_list,ImVec2 offset,float scale,ImGuiNodesState state);
CIMGUI_API ImGuiNodesInput* ImGuiNodesInput_ImGuiNodesInput(const char* name,ImGuiNodesConnectorType type);
CIMGUI_API void ImGuiNodesInput_destroy(ImGuiNodesInput* self);
CIMGUI_API void ImGuiNodesOutput_TranslateOutput(ImGuiNodesOutput* self,ImVec2 delta);
CIMGUI_API void ImGuiNodesOutput_DrawOutput(ImGuiNodesOutput* self,ImDrawList* draw_list,ImVec2 offset,float scale,ImGuiNodesState state);
CIMGUI_API ImGuiNodesOutput* ImGuiNodesOutput_ImGuiNodesOutput(const char* name,ImGuiNodesConnectorType type);
CIMGUI_API void ImGuiNodesOutput_destroy(ImGuiNodesOutput* self);
CIMGUI_API void ImGuiNodesNode_TranslateNode(ImGuiNodesNode* self,ImVec2 delta,bool selected_only);
CIMGUI_API void ImGuiNodesNode_BuildNodeGeometry(ImGuiNodesNode* self,ImVec2 inputs_size,ImVec2 outputs_size);
CIMGUI_API void ImGuiNodesNode_DrawNode(ImGuiNodesNode* self,ImDrawList* draw_list,ImVec2 offset,float scale,ImGuiNodesState state);
CIMGUI_API ImGuiNodesNode* ImGuiNodesNode_ImGuiNodesNode(const char* name,ImGuiNodesNodeType type,ImColor color);
CIMGUI_API void ImGuiNodesNode_destroy(ImGuiNodesNode* self);
CIMGUI_API void ImGuiNodes_UpdateCanvasGeometry(ImGuiNodes* self,ImDrawList* draw_list);
CIMGUI_API ImGuiNodesNode* ImGuiNodes_UpdateNodesFromCanvas(ImGuiNodes* self);
CIMGUI_API ImGuiNodesNode* ImGuiNodes_CreateNodeFromDesc(ImGuiNodes* self,ImGuiNodesNodeDesc* desc,ImVec2 pos);
CIMGUI_API void ImGuiNodes_DrawConnection(ImGuiNodes* self,ImVec2 p1,ImVec2 p4,ImColor color);
CIMGUI_API bool ImGuiNodes_ConnectionMatrix(ImGuiNodes* self,ImGuiNodesNode* input_node,ImGuiNodesNode* output_node,ImGuiNodesInput* input,ImGuiNodesOutput* output);
CIMGUI_API bool ImGuiNodes_SortSelectedNodesOrder(ImGuiNodes* self);
CIMGUI_API void ImGuiNodes_Update(ImGuiNodes* self);
CIMGUI_API void ImGuiNodes_ProcessNodes(ImGuiNodes* self);
CIMGUI_API void ImGuiNodes_ProcessContextMenu(ImGuiNodes* self);
CIMGUI_API ImGuiNodes* ImGuiNodes_ImGuiNodes(void);
CIMGUI_API void ImGuiNodes_destroy(ImGuiNodes* self);

#endif //CIMGUINODES_INCLUDED