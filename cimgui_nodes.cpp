//This file is automatically generated by generator.lua from https://github.com/anthonyhan/ImGuiNodes
//based on nodes.h file version XXX from https://gist.github.com/ChemistAion/0cd64b71711d81661344af040c142c1c
//with internal.h api
#include "imgui.h"
#include "imgui_internal.h"
#include "./nodes/nodes.h"
#include "cimgui_nodes.h"



CIMGUI_API void ImGuiNodesInput_TranslateInput(ImGuiNodesInput* self,ImVec2 delta)
{
    return self->TranslateInput(delta);
}
CIMGUI_API void ImGuiNodesInput_DrawInput(ImGuiNodesInput* self,ImDrawList* draw_list,ImVec2 offset,float scale,ImGuiNodesState state)
{
    return self->DrawInput(draw_list,offset,scale,state);
}
CIMGUI_API ImGuiNodesInput* ImGuiNodesInput_ImGuiNodesInput(const char* name,ImGuiNodesConnectorType type)
{
    return IM_NEW(ImGuiNodesInput)(name,type);
}
CIMGUI_API void ImGuiNodesInput_destroy(ImGuiNodesInput* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImGuiNodesOutput_TranslateOutput(ImGuiNodesOutput* self,ImVec2 delta)
{
    return self->TranslateOutput(delta);
}
CIMGUI_API void ImGuiNodesOutput_DrawOutput(ImGuiNodesOutput* self,ImDrawList* draw_list,ImVec2 offset,float scale,ImGuiNodesState state)
{
    return self->DrawOutput(draw_list,offset,scale,state);
}
CIMGUI_API ImGuiNodesOutput* ImGuiNodesOutput_ImGuiNodesOutput(const char* name,ImGuiNodesConnectorType type)
{
    return IM_NEW(ImGuiNodesOutput)(name,type);
}
CIMGUI_API void ImGuiNodesOutput_destroy(ImGuiNodesOutput* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImGuiNodesNode_TranslateNode(ImGuiNodesNode* self,ImVec2 delta,bool selected_only)
{
    return self->TranslateNode(delta,selected_only);
}
CIMGUI_API void ImGuiNodesNode_BuildNodeGeometry(ImGuiNodesNode* self,ImVec2 inputs_size,ImVec2 outputs_size)
{
    return self->BuildNodeGeometry(inputs_size,outputs_size);
}
CIMGUI_API void ImGuiNodesNode_DrawNode(ImGuiNodesNode* self,ImDrawList* draw_list,ImVec2 offset,float scale,ImGuiNodesState state)
{
    return self->DrawNode(draw_list,offset,scale,state);
}
CIMGUI_API ImGuiNodesNode* ImGuiNodesNode_ImGuiNodesNode(const char* name,ImGuiNodesNodeType type,ImColor color)
{
    return IM_NEW(ImGuiNodesNode)(name,type,color);
}
CIMGUI_API void ImGuiNodesNode_destroy(ImGuiNodesNode* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImGuiNodes_UpdateCanvasGeometry(ImGuiNodes* self,ImDrawList* draw_list)
{
    return self->UpdateCanvasGeometry(draw_list);
}
CIMGUI_API ImGuiNodesNode* ImGuiNodes_UpdateNodesFromCanvas(ImGuiNodes* self)
{
    return self->UpdateNodesFromCanvas();
}
CIMGUI_API ImGuiNodesNode* ImGuiNodes_CreateNodeFromDesc(ImGuiNodes* self,ImGuiNodesNodeDesc* desc,ImVec2 pos)
{
    return self->CreateNodeFromDesc(desc,pos);
}
CIMGUI_API void ImGuiNodes_DrawConnection(ImGuiNodes* self,ImVec2 p1,ImVec2 p4,ImColor color)
{
    return self->DrawConnection(p1,p4,color);
}
CIMGUI_API bool ImGuiNodes_ConnectionMatrix(ImGuiNodes* self,ImGuiNodesNode* input_node,ImGuiNodesNode* output_node,ImGuiNodesInput* input,ImGuiNodesOutput* output)
{
    return self->ConnectionMatrix(input_node,output_node,input,output);
}
CIMGUI_API bool ImGuiNodes_SortSelectedNodesOrder(ImGuiNodes* self)
{
    return self->SortSelectedNodesOrder();
}
CIMGUI_API void ImGuiNodes_Update(ImGuiNodes* self)
{
    return self->Update();
}
CIMGUI_API void ImGuiNodes_ProcessNodes(ImGuiNodes* self)
{
    return self->ProcessNodes();
}
CIMGUI_API void ImGuiNodes_ProcessContextMenu(ImGuiNodes* self)
{
    return self->ProcessContextMenu();
}
CIMGUI_API ImGuiNodes* ImGuiNodes_ImGuiNodes(void)
{
    return IM_NEW(ImGuiNodes)();
}
CIMGUI_API void ImGuiNodes_destroy(ImGuiNodes* self)
{
    IM_DELETE(self);
}


